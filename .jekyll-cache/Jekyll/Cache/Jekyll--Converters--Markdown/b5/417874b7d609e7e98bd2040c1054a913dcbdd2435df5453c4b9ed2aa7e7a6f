I"wX<h2 id="문제">문제</h2>
<p><a href="https://www.acmicpc.net/problem/13460">백준 - 구슬 탈출2</a></p>

<h2 id="풀이">풀이</h2>
<p>DFS, BFS를 이용해 해결할 수 있는 문제다. 최소 횟수로 구슬을 탈출시키는 문제이므로 BFS가 조금 더 효율적이다.</p>

<p>문제 자체는 어렵지 않다. 다만 구슬이 겹쳤을 때 위치를 잘 조정해야한다.</p>

<h2 id="코드">코드</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">static</span> <span class="kd">class</span> <span class="nc">Pos</span> <span class="o">{</span>
		<span class="kt">int</span> <span class="n">row</span><span class="o">,</span> <span class="n">col</span><span class="o">;</span>
		<span class="kd">public</span> <span class="nf">Pos</span><span class="o">(</span><span class="kt">int</span> <span class="n">row</span><span class="o">,</span> <span class="kt">int</span> <span class="n">col</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">this</span><span class="o">.</span><span class="na">row</span> <span class="o">=</span> <span class="n">row</span><span class="o">;</span>
			<span class="k">this</span><span class="o">.</span><span class="na">col</span> <span class="o">=</span> <span class="n">col</span><span class="o">;</span>
		<span class="o">}</span>
		<span class="nd">@Override</span>
		<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="nc">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
			<span class="nc">Pos</span> <span class="n">p</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Pos</span><span class="o">)</span><span class="n">obj</span><span class="o">;</span>
			<span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">row</span> <span class="o">==</span> <span class="n">p</span><span class="o">.</span><span class="na">row</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="o">.</span><span class="na">col</span> <span class="o">==</span> <span class="n">p</span><span class="o">.</span><span class="na">col</span><span class="o">;</span>
		<span class="o">}</span>
	<span class="o">}</span>
	
	<span class="kd">static</span> <span class="kd">class</span> <span class="nc">Data</span> <span class="o">{</span>
		<span class="nc">Pos</span> <span class="n">red</span><span class="o">,</span> <span class="n">blue</span><span class="o">;</span>
		<span class="kd">public</span> <span class="nf">Data</span><span class="o">(</span><span class="nc">Pos</span> <span class="n">red</span><span class="o">,</span> <span class="nc">Pos</span> <span class="n">blue</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">this</span><span class="o">.</span><span class="na">red</span> <span class="o">=</span> <span class="n">red</span><span class="o">;</span>
			<span class="k">this</span><span class="o">.</span><span class="na">blue</span> <span class="o">=</span> <span class="n">blue</span><span class="o">;</span>
		<span class="o">}</span>
	<span class="o">}</span>
	
	<span class="kd">static</span> <span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="n">m</span><span class="o">;</span>
	<span class="kd">static</span> <span class="kt">char</span><span class="o">[][]</span> <span class="n">map</span><span class="o">;</span>
	<span class="kd">static</span> <span class="kt">boolean</span><span class="o">[][][][]</span> <span class="n">visit</span><span class="o">;</span>
	
	<span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">dr</span> <span class="o">=</span> <span class="o">{-</span><span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">};</span>
	<span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">dc</span> <span class="o">=</span> <span class="o">{</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">};</span>
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		<span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
		<span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
		<span class="n">n</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
		<span class="n">m</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
		<span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="o">[</span><span class="n">n</span><span class="o">][</span><span class="n">m</span><span class="o">];</span>
		<span class="n">visit</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">n</span><span class="o">][</span><span class="n">m</span><span class="o">][</span><span class="n">n</span><span class="o">][</span><span class="n">m</span><span class="o">];</span>
		<span class="nc">Pos</span> <span class="n">red</span> <span class="o">=</span> <span class="kc">null</span><span class="o">,</span> <span class="n">blue</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">map</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">().</span><span class="na">toCharArray</span><span class="o">();</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">m</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
				<span class="k">if</span><span class="o">(</span><span class="n">map</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">==</span> <span class="sc">'R'</span><span class="o">)</span> <span class="o">{</span>
					<span class="n">red</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Pos</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">j</span><span class="o">);</span>
					<span class="n">map</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="sc">'.'</span><span class="o">;</span>
				<span class="o">}</span> <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">map</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">==</span> <span class="sc">'B'</span><span class="o">)</span> <span class="o">{</span>
					<span class="n">blue</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Pos</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">j</span><span class="o">);</span>
					<span class="n">map</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="sc">'.'</span><span class="o">;</span>
				<span class="o">}</span>
			<span class="o">}</span>
		<span class="o">}</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">bfs</span><span class="o">(</span><span class="n">red</span><span class="o">,</span> <span class="n">blue</span><span class="o">));</span>
	<span class="o">}</span>
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">bfs</span><span class="o">(</span><span class="nc">Pos</span> <span class="n">sr</span><span class="o">,</span> <span class="nc">Pos</span> <span class="n">sb</span><span class="o">)</span> <span class="o">{</span>
		<span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
		<span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Data</span><span class="o">&gt;</span> <span class="n">q</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
		<span class="n">q</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="k">new</span> <span class="nc">Data</span><span class="o">(</span><span class="n">sr</span><span class="o">,</span> <span class="n">sb</span><span class="o">));</span>
		<span class="n">visit</span><span class="o">[</span><span class="n">sr</span><span class="o">.</span><span class="na">row</span><span class="o">][</span><span class="n">sr</span><span class="o">.</span><span class="na">col</span><span class="o">][</span><span class="n">sb</span><span class="o">.</span><span class="na">row</span><span class="o">][</span><span class="n">sb</span><span class="o">.</span><span class="na">col</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span> 
		<span class="k">while</span><span class="o">(!</span><span class="n">q</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
			<span class="n">ret</span><span class="o">++;</span>
			<span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">size</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
				<span class="nc">Data</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
				<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">dir</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">dir</span><span class="o">&lt;</span><span class="mi">4</span><span class="o">;</span> <span class="n">dir</span><span class="o">++)</span> <span class="o">{</span>
					<span class="nc">Pos</span> <span class="n">nr</span> <span class="o">=</span> <span class="n">next</span><span class="o">(</span><span class="n">cur</span><span class="o">.</span><span class="na">red</span><span class="o">,</span> <span class="n">dir</span><span class="o">);</span>
					<span class="nc">Pos</span> <span class="n">nb</span> <span class="o">=</span> <span class="n">next</span><span class="o">(</span><span class="n">cur</span><span class="o">.</span><span class="na">blue</span><span class="o">,</span> <span class="n">dir</span><span class="o">);</span>
					<span class="k">if</span><span class="o">(</span><span class="n">nb</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">continue</span><span class="o">;</span>
					<span class="k">if</span><span class="o">(</span><span class="n">nr</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="n">ret</span><span class="o">;</span>
					<span class="k">if</span><span class="o">(</span><span class="n">ret</span> <span class="o">==</span> <span class="mi">10</span><span class="o">)</span> <span class="k">continue</span><span class="o">;</span>
					<span class="k">if</span><span class="o">(</span><span class="n">nr</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">nb</span><span class="o">))</span> <span class="o">{</span>
						<span class="k">if</span><span class="o">(</span><span class="n">dir</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
							<span class="k">if</span><span class="o">(</span><span class="n">cur</span><span class="o">.</span><span class="na">red</span><span class="o">.</span><span class="na">row</span> <span class="o">&gt;</span> <span class="n">cur</span><span class="o">.</span><span class="na">blue</span><span class="o">.</span><span class="na">row</span><span class="o">)</span> <span class="o">{</span>
								<span class="n">nr</span><span class="o">.</span><span class="na">row</span><span class="o">++;</span>
							<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
								<span class="n">nb</span><span class="o">.</span><span class="na">row</span><span class="o">++;</span>
							<span class="o">}</span>
						<span class="o">}</span> <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">dir</span> <span class="o">==</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
							<span class="k">if</span><span class="o">(</span><span class="n">cur</span><span class="o">.</span><span class="na">red</span><span class="o">.</span><span class="na">row</span> <span class="o">&gt;</span> <span class="n">cur</span><span class="o">.</span><span class="na">blue</span><span class="o">.</span><span class="na">row</span><span class="o">)</span> <span class="o">{</span>
								<span class="n">nb</span><span class="o">.</span><span class="na">row</span><span class="o">--;</span>
							<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
								<span class="n">nr</span><span class="o">.</span><span class="na">row</span><span class="o">--;</span>
							<span class="o">}</span>
						<span class="o">}</span> <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">dir</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
							<span class="k">if</span><span class="o">(</span><span class="n">cur</span><span class="o">.</span><span class="na">red</span><span class="o">.</span><span class="na">col</span> <span class="o">&lt;</span> <span class="n">cur</span><span class="o">.</span><span class="na">blue</span><span class="o">.</span><span class="na">col</span><span class="o">)</span> <span class="o">{</span>
								<span class="n">nr</span><span class="o">.</span><span class="na">col</span><span class="o">--;</span>
							<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
								<span class="n">nb</span><span class="o">.</span><span class="na">col</span><span class="o">--;</span>
							<span class="o">}</span>
						<span class="o">}</span> <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">dir</span> <span class="o">==</span> <span class="mi">3</span><span class="o">)</span> <span class="o">{</span>
							<span class="k">if</span><span class="o">(</span><span class="n">cur</span><span class="o">.</span><span class="na">red</span><span class="o">.</span><span class="na">col</span> <span class="o">&lt;</span> <span class="n">cur</span><span class="o">.</span><span class="na">blue</span><span class="o">.</span><span class="na">col</span><span class="o">)</span> <span class="o">{</span>
								<span class="n">nb</span><span class="o">.</span><span class="na">col</span><span class="o">++;</span>
							<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
								<span class="n">nr</span><span class="o">.</span><span class="na">col</span><span class="o">++;</span>
							<span class="o">}</span>
						<span class="o">}</span>
					<span class="o">}</span>
					<span class="k">if</span><span class="o">(!</span><span class="n">visit</span><span class="o">[</span><span class="n">nr</span><span class="o">.</span><span class="na">row</span><span class="o">][</span><span class="n">nr</span><span class="o">.</span><span class="na">col</span><span class="o">][</span><span class="n">nb</span><span class="o">.</span><span class="na">row</span><span class="o">][</span><span class="n">nb</span><span class="o">.</span><span class="na">col</span><span class="o">])</span> <span class="o">{</span>
						<span class="n">visit</span><span class="o">[</span><span class="n">nr</span><span class="o">.</span><span class="na">row</span><span class="o">][</span><span class="n">nr</span><span class="o">.</span><span class="na">col</span><span class="o">][</span><span class="n">nb</span><span class="o">.</span><span class="na">row</span><span class="o">][</span><span class="n">nb</span><span class="o">.</span><span class="na">col</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
						<span class="n">q</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="k">new</span> <span class="nc">Data</span><span class="o">(</span><span class="n">nr</span><span class="o">,</span> <span class="n">nb</span><span class="o">));</span>
					<span class="o">}</span>
				<span class="o">}</span>
			<span class="o">}</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
	<span class="o">}</span>
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="nc">Pos</span> <span class="nf">next</span><span class="o">(</span><span class="nc">Pos</span> <span class="n">p</span><span class="o">,</span> <span class="kt">int</span> <span class="n">dir</span><span class="o">)</span> <span class="o">{</span>
		<span class="kt">int</span> <span class="n">row</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="na">row</span><span class="o">;</span>
		<span class="kt">int</span> <span class="n">col</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="na">col</span><span class="o">;</span>
		<span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">row</span> <span class="o">+=</span> <span class="n">dr</span><span class="o">[</span><span class="n">dir</span><span class="o">];</span>
			<span class="n">col</span> <span class="o">+=</span> <span class="n">dc</span><span class="o">[</span><span class="n">dir</span><span class="o">];</span>
			<span class="k">if</span><span class="o">(</span><span class="n">map</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">col</span><span class="o">]</span> <span class="o">==</span> <span class="sc">'O'</span><span class="o">)</span> <span class="o">{</span>
				<span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
			<span class="o">}</span> <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">map</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">col</span><span class="o">]</span> <span class="o">==</span> <span class="sc">'#'</span><span class="o">)</span> <span class="o">{</span>
				<span class="n">row</span> <span class="o">-=</span> <span class="n">dr</span><span class="o">[</span><span class="n">dir</span><span class="o">];</span>
				<span class="n">col</span> <span class="o">-=</span> <span class="n">dc</span><span class="o">[</span><span class="n">dir</span><span class="o">];</span>
				<span class="k">break</span><span class="o">;</span>
			<span class="o">}</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="k">new</span> <span class="nf">Pos</span><span class="o">(</span><span class="n">row</span><span class="o">,</span> <span class="n">col</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>
:ET