I"/<h2 id="인덱스색인란">인덱스(색인)란?</h2>
<hr />
<p>데이터베이스의 인덱스를 살펴보기에 앞서 인덱스가 무엇인지 살펴보자. 위키백과에 정의된 인덱스의 정의는 다음과 같다.</p>

<blockquote>
  <p>색인(索引)은 책 속의 낱말이나 구절, 또 이에 관련한 지시자를 찾아보기 쉽도록 일정한 순서로 나열한 목록을 가리킨다. 인덱스(index)라고도 한다.</p>
</blockquote>

<p>이처럼 색인은 핵심 키워드들을 사전 순서대로 정렬하여, 책의 내용을 한 눈에 볼 수 있도록 한다. 그리고 각 키워드는 책의 페이지와 매핑되어 우리가 찾고자 하는 내용을 빠르게 찾을 수 있도록 돕는다. 만약 책에 색인이 없다면 최악의 경우에는 우리가 원하는 내용을 찾기 위해 책의 모든 페이지를 넘겨봐야 할 것이다.</p>

<p> </p>
<h2 id="데이터베이스-인덱스">데이터베이스 인덱스</h2>
<hr />
<p>데이터베이스의 인덱스도 이와 유사하다. 테이블에 데이터가 무분별하게 저장되어 있다면 특정 데이터를 조회하기 위해서 테이블의 모든 튜플을 검색해야 할 것이다. 그러나 데이터베이스의 인덱스를 이용하면 데이터를 조회하는 쿼리를 빠르게 수행할 수 있다.</p>

<p>인덱스는 특정 테이블과 관련이 있고, 한개 이상의 키로 구성된다. 키는 테이블의 컬럼을 기반으로 만들어지고, 키를 통해 인덱스를 조회하여 하나 이상의 데이터베이스 레코드를 찾을 수 있다.</p>

<p>이처럼 인덱스는 데이터를 조회하는 속도를 크게 향상시키므로, 각 테이블에 올바른 인덱스를 정의해야한다. 테이블의 크기가 작다면 크게 문제되지 않겠지만, 테이블의 크기가 크다면 인덱스의 정의 방식에 따라 테이블의 조회 시간이 크게 차이 날 것이다.</p>

<p> </p>
<h2 id="카드-덱을-통해-인덱스-이해하기">카드 덱을 통해 인덱스 이해하기</h2>
<hr />
<p>인덱스의 개념을 더 쉽게 이해하기 위해 플레잉 카드를 예로 들어보자. 플레잉 카드의 구성 요소는 다음과 같다.</p>
<ul>
  <li>
    <p>하트: 13장 (2, 3, 4, 5, 6, 7, 8, 9, J, Q, K, A)</p>
  </li>
  <li>
    <p>스페이드: 13장 (2, 3, 4, 5, 6, 7, 8, 9, J, Q, K, A)</p>
  </li>
  <li>
    <p>다이아몬드: 13장 (2, 3, 4, 5, 6, 7, 8, 9, J, Q, K, A)</p>
  </li>
  <li>
    <p>클럽: 13장 (2, 3, 4, 5, 6, 7, 8, 9, J, Q, K, A)</p>
  </li>
</ul>

<p>덱은 위와 같이 총 52장의 카드로 구성되어 있다. 덱이 무작위로 섞여있는 상태에서 <code class="highlighter-rouge">스페이드-7</code>을 찾으려면 평균적으로 <strong>26장</strong>의 카드를 뒤집어서 확인해야한다.</p>

<p><img src="/images/playing-card.webp" alt="playing-card" /></p>

<p>이제 위 방식 대신, 카드를 모양별로 4개의 더미로 나누어 <code class="highlighter-rouge">스페이드-7</code>을 찾아야 하는 상황을 고려해보자. 먼저 4개의 더미에서 스페이드 모양을 찾으려면 평균적으로 2개의 카드 더미를 확인해야한다. 그리고 스페이드 카드 더미에서 <code class="highlighter-rouge">스페이드-7</code>을 찾으려면 평균적으로 7장의 카드를 뒤집어야 한다. 따라서 총 <strong>9회</strong>의 시간이 소요된다.</p>

<p>키(카드의 모양)를 이용하여 데이터를 분류하여 탐색 시간을 26회에서 9회로 크게 줄였다. 이것이 데이터베이스에서 인덱스를 사용하는 이유이다.</p>

<p> </p>
<h2 id="b-tree란">B+ Tree란?</h2>
<hr />
<p>데이터베이스의 인덱스를 저장하기 위해 사용되는 구조를 B+ Tree라고 부른다. B+ Tree는 우리가 앞서 설명한 카드 정렬 전략과 유사하게 동작한다. B+ 트리에서 키 값은 많은 작은 더미들로 나뉘어진다. 이름이 내포하고 있는 것처럼 더미(기술적으로 노드라고 불림)는 트리와 유사한 방식으로 연결된다.</p>

<p>B + Tree Sizzle를 만드는 것은 트리의 각 파일에 대해 찾고있는 값과 비교하여 다음 파일로 분기하는 것이 매우 쉽고 빠르다는 것입니다. 각 파일은 스캔해야하는 항목 수를 크게 줄입니다. 실제로 기하 급수적으로.</p>

<p>In this way, by walking down the nodes, doing comparisons along the way we can avoid scanning thousands of records, in just a few easy node scans.  Hopefully, this diagram helps to illustrate the idea…</p>

<blockquote>
  <p>Image</p>
</blockquote>

<p>In the example above consider you need to retrieve the record corresponding to the key-value 15.  To do so the following comparisons are made:</p>

<p>It determined that 15 is less than 40, so we traverse the “To Values &lt; 40” branch.
Since 15 is greater than 10, but less than 30, we traverse the “To Values &gt;= 10 and &lt; 16 branch”
With a B+ Tree Structure, it is possible to have thousands of records represented in a tree that has relatively few levels within its branches.  As the number of lookups is directly related to the height of the tree, it is imperative to ensure all the branches are of equal height.  This spreads out the data across the entire tree, making it more efficient to look up data within any range.</p>

<p>Since data is constantly updated in a database, it’s important for the B+ Tree to keep its balance.  Each time records are added, removed, or keys updates, special algorithms shift data and key values from block to block to ensure no one part of the tree is more than one level higher than the other.</p>

<p>Truly studying a B+ Tree is very technical and mathematical.  If you are interested in the gritty detail, I would start with the Wikipedia article.  I an actual example, each node (dark blue) would contain many key values (light blue).  In fact, each node is the size of a block of a disk, which is traditionally the smallest amount of data that can be read from a hard drive.</p>

<p>This is a pretty complicated subject.  I hope I’ve made it easy to understand.  I would really like to know.  Please leave a comment.</p>

<p>Remember!  I want to remind you all that if you have other questions you want to be answered, then post a comment or tweet me.  I’m here to help you.</p>

<p> </p>
<h2 id="데이터베이스-색인">데이터베이스 색인</h2>
<hr />

<h2 id="출처">출처</h2>
<hr />
<ul>
  <li>https://www.essentialsql.com/what-is-a-database-index/</li>
  <li>https://k39335.tistory.com/26</li>
  <li>https://ko.wikipedia.org/wiki/%EC%83%89%EC%9D%B8</li>
</ul>
:ET