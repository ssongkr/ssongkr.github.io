I"0<h2 id="인덱스색인란">인덱스(색인)란?</h2>
<hr />
<p>데이터베이스의 인덱스를 살펴보기에 앞서 인덱스가 무엇인지 살펴보자. 위키백과에 정의된 인덱스의 정의는 다음과 같다.</p>

<blockquote>
  <p>색인(索引)은 책 속의 낱말이나 구절, 또 이에 관련한 지시자를 찾아보기 쉽도록 일정한 순서로 나열한 목록을 가리킨다. 인덱스(index)라고도 한다.</p>
</blockquote>

<p>이처럼 색인은 핵심 키워드들을 사전 순서대로 정렬하여, 책의 내용을 한 눈에 볼 수 있도록 한다. 그리고 각 키워드는 책의 페이지와 매핑되어 우리가 찾고자 하는 내용을 빠르게 찾을 수 있도록 돕는다. 만약 책에 색인이 없다면 최악의 경우에는 우리가 원하는 내용을 찾기 위해 책의 모든 페이지를 넘겨봐야 할 것이다.</p>

<p> </p>
<h3 id="데이터베이스-인덱스">데이터베이스 인덱스</h3>
<p>데이터베이스의 인덱스도 이와 유사하다. 테이블에 데이터가 무분별하게 저장되어 있다면 특정 데이터를 조회하기 위해서 테이블의 모든 튜플을 검색해야 할 것이다. 그러나 데이터베이스의 인덱스를 이용하면 데이터를 조회하는 쿼리를 빠르게 수행할 수 있다.</p>

<p>인덱스는 특정 테이블과 관련이 있고, 한개 이상의 키로 구성된다. 키는 테이블의 컬럼을 기반으로 만들어진다. 그리고 키 값을 통해 인덱스를 조회하여 하나 이상의 데이터베이스 레코드를 찾을 수 있다.</p>

<p>데이터베이스의 인덱스와 키를 조금 더 쉽게 이해하기 위해 앞선 예시(책)와 비교해보겠다. 인덱스의 <strong>키</strong>는 우리가 책에서 찾고자하는 주제의 단어로 비유할 수 있다. 책의 <strong>인덱스</strong>는 키(찾고자하는 주제의 단어)와 매핑되는 책의 페이지 번호로 구성되어있다. 인덱스의 키는 알파벳 순서대로 정렬되어있기 때문에, 우리는 인덱스를 빠르게 스캔하여 매칭되는 키를 찾을 수 있다. 원하는 키를 찾으면 매핑되는 페이지로 이동하여 우리가 찾고자 하는 데이터 확인할 수 있다.</p>

<p>이처럼 인덱스는 데이터를 조회하는 속도를 크게 향상시키기 때문에, 각 테이블에 올바른 인덱스를 정의해야한다. 테이블의 크기가 작다면 크게 문제되지 않겠지만, 테이블의 크기가 크다면 인덱스의 정의 방식에 따라 테이블의 조회 시간이 크게 차이 날 것이다.</p>

<p> </p>
<h2 id="데이터베이스-인덱스의-장점">데이터베이스 인덱스의 장점</h2>
<hr />
<p>한 번은 일련의 작업을 완료하는 데 약 8 일이 걸린 데이터베이스에서 작업했습니다. 가장 오래 실행되는 쿼리를보고 쿼리 계획 생성기를 통해 실행함으로써 데이터베이스가 새로운 인덱스의 이점을 얻을 수 있음을 깨달았습니다. 옵티마이 저는 쿼리 비용이 30 만 작업에서 30으로 감소 할 것으로 추정했습니다! 인덱스를 구현하고 8 일에서 2 시간까지 전체 작업을 수행했습니다. 말할 것도없이, 우리는 성능 향상에 매우 만족했습니다.</p>

<p> </p>
<h2 id="데이터베이스-색인">데이터베이스 색인</h2>
<hr />

<h2 id="출처">출처</h2>
<hr />
<ul>
  <li>https://www.essentialsql.com/what-is-a-database-index/</li>
  <li>https://k39335.tistory.com/26</li>
  <li>https://ko.wikipedia.org/wiki/%EC%83%89%EC%9D%B8</li>
</ul>
:ET