I"1!<h2 id="문제">문제</h2>
<p><a href="https://www.acmicpc.net/problem/2079">백준 - 팰린드롬</a></p>

<hr />
<h2 id="설명">설명</h2>
<p>문자열이 주어졌을때, 문자열을 최소 개수의 팰린드롬으로 나누는 문제다.</p>

<hr />
<h2 id="풀이">풀이</h2>
<p>다이나믹 프로그래밍을 이용하여 문제를 풀이하였다.
cache 배열을 2차원으로 선언하였고, 문자열의 시작 지점부터 끝 지점까지의 팰린드롬의 최소 개수를 저장하였다.
따라서 cache[0][n-1]의 값이 정답이 될 것이다.</p>

<p>cache[start][end] = cache[start][mid] + cache[mid+1][end]</p>

<p>점화식을 위의 식으로 정의하였다. 하지만 이 점화식으로 문제를 풀이하면 시간초과가 발생한다. 그 이유는 위 점화식은 불필요한 연산을 포함하기 때문이다.</p>

<p>불필요한 연산을 제거하려면 아래와 같이 점화식을 재정의해야한다.</p>

<p>if (String[start][mid] is palindrome) cache[start][end] = 1 + cache[mid+1][end]</p>

<p>문자열의 시작지점 start에서 start + x(x &gt;= 0)번째 지점에는 팰린드롬이 반드시 존재한다. 그 이유는 길이가 1인 부분 문자열은 항상 팰린드롬이기 때문이다. 따라서 start에서 start + x가 팰린드롬이라면 팰린드롬의 개수는 1(=cache[start][start+x]) + cache[start+x+1][end]가 될 것이다.</p>

<p>위의 점화식을 x의 값이 따라서 재귀적으로 수행하면 정답을 얻을 수 있다. 코드는 아래와 같다.</p>

<h2 id="코드">코드</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">static</span> <span class="kt">int</span> <span class="n">n</span><span class="o">;</span>
	<span class="kd">static</span> <span class="kt">char</span><span class="o">[]</span> <span class="n">str</span><span class="o">;</span>
	<span class="kd">static</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">cache</span><span class="o">;</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		<span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
		<span class="n">str</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">().</span><span class="na">toCharArray</span><span class="o">();</span>
		<span class="n">n</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
		<span class="n">cache</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">][</span><span class="n">n</span><span class="o">];</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">dp</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">));</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">dp</span><span class="o">(</span><span class="kt">int</span> <span class="n">l</span><span class="o">,</span> <span class="kt">int</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">l</span> <span class="o">==</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">return</span> <span class="n">cache</span><span class="o">[</span><span class="n">l</span><span class="o">][</span><span class="n">r</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
		<span class="o">}</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">cache</span><span class="o">[</span><span class="n">l</span><span class="o">][</span><span class="n">r</span><span class="o">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">return</span> <span class="n">cache</span><span class="o">[</span><span class="n">l</span><span class="o">][</span><span class="n">r</span><span class="o">];</span>
		<span class="o">}</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">palindrome</span><span class="o">(</span><span class="n">l</span><span class="o">,</span> <span class="n">r</span><span class="o">))</span> <span class="o">{</span>
			<span class="k">return</span> <span class="n">cache</span><span class="o">[</span><span class="n">l</span><span class="o">][</span><span class="n">r</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
		<span class="o">}</span>
		
		<span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">l</span><span class="o">;</span> <span class="n">m</span> <span class="o">&lt;</span> <span class="n">r</span><span class="o">;</span> <span class="n">m</span><span class="o">++)</span> <span class="o">{</span>
			<span class="k">if</span><span class="o">(</span><span class="n">palindrome</span><span class="o">(</span><span class="n">l</span><span class="o">,</span> <span class="n">m</span><span class="o">))</span> <span class="o">{</span>
				<span class="n">min</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">min</span><span class="o">,</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">dp</span><span class="o">(</span><span class="n">m</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">r</span><span class="o">));</span>
			<span class="o">}</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="n">cache</span><span class="o">[</span><span class="n">l</span><span class="o">][</span><span class="n">r</span><span class="o">]</span> <span class="o">=</span> <span class="n">min</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">palindrome</span><span class="o">(</span><span class="kt">int</span> <span class="n">l</span><span class="o">,</span> <span class="kt">int</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">while</span> <span class="o">(</span><span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">if</span> <span class="o">(</span><span class="n">str</span><span class="o">[</span><span class="n">l</span><span class="o">++]</span> <span class="o">!=</span> <span class="n">str</span><span class="o">[</span><span class="n">r</span><span class="o">--])</span>
				<span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
:ET