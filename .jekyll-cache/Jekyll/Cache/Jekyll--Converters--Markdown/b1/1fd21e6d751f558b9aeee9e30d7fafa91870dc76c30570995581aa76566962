I"<h2 id="들어가며">들어가며</h2>
<hr />
<p>최근 스프링을 공부하면서 JDBC와 MyBatis를 사용하여 데이터베이스를 연동하고있다. 그런데 스프링 프레임워크에 익숙해지는데 집중하다보니, 해당 개념들을 명확하게 숙지하지 못한 상태에서 프로그래밍만 하고 있었다. 이번 포스팅을 통해 JDBC와 JPA/ORM, 그리고 SQL Mapper에 대해서 명확히 정리하고자 한다.</p>

<p> </p>
<h2 id="jdbc란">JDBC란?</h2>
<hr />
<p>JDBC(Java Database Connectivity)는 자바에서 데이터베이스에 접속할 수 있도록 하는 자바 API이다. JDBC는 데이터베이스에서 자료를 쿼리하거나 업데이트하는 방법을 제공한다.</p>

<h3 id="jdbc-아키텍처">JDBC 아키텍처</h3>
<p><img src="/images/jdbc-architecture.png" alt="jdbc-architecture" /></p>

<h4 id="java-application">Java Application</h4>
<p>클라이언트나 서버에서 독립적으로 실행되는 자바 프로그램</p>

<h4 id="jdbc-api">JDBC API</h4>
<p>자바 프로그램을 데이터베이스와 연결하거나 통신할 수 있도록 돕는 클래스와 인터페이스를 제공한다.</p>

<h4 id="jdbc-driver-manager">JDBC Driver Manager</h4>
<p>데이터베이스 드라이버들을 관리한다. 올바른 드라이버를 사용하여 각각의 데이터 소스에 접근하도록 한다.</p>

<h4 id="jdbc-driver">JDBC Driver</h4>
<p>이 인터페이스는 데이터베이스와의 통신을 처리한다.</p>

<p> </p>
<h2 id="persistent와-persistence-framework">Persistent와 Persistence Framework</h2>
<hr />
<p>JPA와 ORM을 설명하기에 앞서 <strong>영속성</strong>이 무엇인지 알아보자.</p>

<h4 id="영속성persistent">영속성(Persistent)</h4>
<p>영속성이란 데이터를 생성한 프로그램이 종료되더라도 사라지지 않는 데이터의 특성이다. 영속성이 없는 데이터는 메모리에 저장되기 때문에 프로그램을 종료하면 데이터가 모두 사라진다. 따라서 해당 데이터를 파일 시스템이나 데이터베이스에 저장하여 영속성을 부여할 수 있다.</p>

<h4 id="persistence-framework">Persistence Framework</h4>
<p>Persistence Framework는 데이터의 저장, 조회, 변경, 삭제를 다루는 클래스 및 설정 파일들의 집합이다. JDBC 프로그래밍의 복잡함이나 번거로움 없이 간단한 작업만으로 데이터베이스와 연동되는 시스템을 빠르게 개발할 수 있으며 안정적인 구동을 보장한다.</p>

<p>Persistence Framework는 크게 ORM(Object Relational Mapping)과 SQL Mapping 두가지로 나뉘어진다.</p>

<p> </p>
<h3 id="ormobject-relational-mapping">ORM(Object Relational Mapping)</h3>
<p>ORM이란 자바의 객체와 데이터베이스의 테이블을 매핑시켜주는 것을 말한다. (자바 진영에 국한된 기술은 아니다) ORM을 사용하면 SQL의 쿼리를 자바의 메서드로 조작할 수 있다.</p>

<p>예를들어 <code class="highlighter-rouge">User</code> 테이블의 데이터를 조회하려면, MySQL에서는 <code class="highlighter-rouge">select * from user</code>라는 쿼리를 실행해야한다. 그러나 ORM을 사용하면 <code class="highlighter-rouge">userInstance.findAll()</code>라는 메서드를 호출하여 데이터를 조회할 수 있다.</p>

<p>이처럼 ORM을 사용하면 메서드 호출로 쿼리를 수행할 수 있기 때문에, 생산성이 높아진다는 장점이 있다. 하지만 쿼리가 복잡해지면 ORM으로 표현하는데 한계가 있고, 성능이 비교적 느리다는 단점이 있다.</p>

<p> </p>
<h3 id="jpajava-persistent-api">JPA(Java Persistent API)</h3>
<p>JAP는 자바 ORM 기술의 표준 API 명세이다. JAP는 ORM을 사용하기 위한 <strong>인터페이스</strong>의 집합이다. 따라서 JPA를 사용하기 위해서는 JPA를 구현한 Hibernate, EclipseLink, DataNucleus 같은 ORM 프레임워크를 사용해야한다.</p>

<p>자바에서 JDBC를 직접 사용하는 것보다 Mybatis를 사용했을때, 코드가 간결해지고 유지보수가 편했다는 것을 느꼈다. Hibernate를 사용하면 Mybatis보다 코드가 더 간결해지고, 객체 지향적인 프로그래밍을 할 수 있기 때문에 생산성이 매우 높아진다.</p>

<h2 id="출처">출처</h2>
<hr />
<ul>
  <li>https://ko.wikipedia.org/wiki/JDBC</li>
  <li>http://examradar.com/jdbc-connectivity-model-architecture/</li>
  <li>https://victorydntmd.tistory.com/195</li>
  <li>https://gmlwjd9405.github.io/2018/12/25/difference-jdbc-jpa-mybatis.html</li>
</ul>
:ET