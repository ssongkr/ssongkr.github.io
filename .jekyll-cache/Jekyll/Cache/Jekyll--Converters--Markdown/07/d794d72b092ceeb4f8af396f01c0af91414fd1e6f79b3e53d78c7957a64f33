I"CX<h2 id="문제">문제</h2>
<p><a href="https://www.acmicpc.net/problem/7575">백준 - 바이러스</a></p>

<hr />
<h2 id="설명">설명</h2>
<p>프로그램의 바이러스는 길이가 K인 숫자들로 구성되어 있다. 모든 프로그램에 동일한 코드가 있다면 바이러스 코드로 추정한다. 이때 바이러스 코드로 추정되는 부분이 있는지 검사하라.</p>

<hr />
<h2 id="풀이">풀이</h2>
<p>해쉬와 이분탐색을 이용하여 문제를 풀이하였다. 문제를 풀이한 방법은 다음과 같다.</p>

<ol>
  <li>
    <p>Sum 배열의 i-번째 위치에 i-번째 원소부터 K개의 원소의 합을 저장한다. 그리고 현재의 인덱스 정보도 함께 저장한다.</p>
  </li>
  <li>
    <p>Sum 배열을 원소의 합을 기준으로 오름차순으로 정렬한다.</p>
  </li>
  <li>
    <p>첫번째 Sum[0]에 저장된 값을 기준 키 값으로 사용한다. 만약 Sum[1] ~ Sum[N-1]에도 같은 키 값을 가지고 있다면 해당 정보는 바이러스일 가능성이 있는 프로그램이다. Sum[1] ~ Sum[N-1]이 모두 동일한 키 값을 가지고있는지 확인하기 위해 이분탐색을 이용한다. 필자는 lower bound와 upper bound를 이용하여 키 값이 같은 모든 위치정보를 반환하였고, Sum 배열에 추가적으로 저장된 인덱스 값을 이용해서 해당 키 값이 실제로 동일한 원소의 합으로 이루어졌는지(바이러스인지) 확인하였다.</p>
  </li>
</ol>

<h2 id="코드">코드</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">static</span> <span class="kd">class</span> <span class="nc">Pair</span> <span class="o">{</span>
		<span class="kt">int</span> <span class="n">idx</span><span class="o">,</span> <span class="n">val</span><span class="o">;</span>
		<span class="kd">public</span> <span class="nf">Pair</span><span class="o">(</span><span class="kt">int</span> <span class="n">idx</span><span class="o">,</span> <span class="kt">int</span> <span class="n">val</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">this</span><span class="o">.</span><span class="na">idx</span> <span class="o">=</span> <span class="n">idx</span><span class="o">;</span>
			<span class="k">this</span><span class="o">.</span><span class="na">val</span> <span class="o">=</span> <span class="n">val</span><span class="o">;</span>
		<span class="o">}</span>
	<span class="o">}</span>
	
	<span class="kd">static</span> <span class="kt">int</span> <span class="no">N</span><span class="o">,</span> <span class="no">K</span><span class="o">;</span>
	<span class="kd">static</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">programs</span><span class="o">;</span>
	<span class="kd">static</span> <span class="nc">Pair</span><span class="o">[][]</span> <span class="n">sum</span><span class="o">;</span>
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		<span class="c1">// MyScanner sc = new MyScanner();</span>
		<span class="nc">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="no">N</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="no">K</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="n">programs</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">][];</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">programs</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">()];</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">programs</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
				<span class="n">programs</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
			<span class="o">}</span>
		<span class="o">}</span>
		
		<span class="n">sum</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Pair</span><span class="o">[</span><span class="no">N</span><span class="o">][];</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">sum</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Pair</span><span class="o">[</span><span class="n">programs</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">length</span> <span class="o">-</span> <span class="no">K</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">sum</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
				<span class="kt">int</span> <span class="n">hash</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
				<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">k</span><span class="o">&lt;</span><span class="no">K</span><span class="o">;</span> <span class="n">k</span><span class="o">++)</span> <span class="o">{</span>
					<span class="n">hash</span> <span class="o">+=</span> <span class="n">programs</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">+</span><span class="n">k</span><span class="o">];</span>
				<span class="o">}</span>
				<span class="n">sum</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Pair</span><span class="o">(</span><span class="n">j</span><span class="o">,</span> <span class="n">hash</span><span class="o">);</span>
			<span class="o">}</span>
			<span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">sum</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="k">new</span> <span class="nc">Comparator</span><span class="o">&lt;</span><span class="nc">Pair</span><span class="o">&gt;()</span> <span class="o">{</span>
				<span class="nd">@Override</span>
				<span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="nc">Pair</span> <span class="n">o1</span><span class="o">,</span> <span class="nc">Pair</span> <span class="n">o2</span><span class="o">)</span> <span class="o">{</span>
					<span class="k">return</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">o1</span><span class="o">.</span><span class="na">val</span><span class="o">,</span> <span class="n">o2</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>
				<span class="o">}</span>
			<span class="o">});</span>
		<span class="o">}</span>
		
		<span class="k">if</span><span class="o">(</span><span class="n">hasVirus</span><span class="o">())</span> <span class="o">{</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"YES"</span><span class="o">);</span>
		<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"NO"</span><span class="o">);</span>
		<span class="o">}</span>
		
		<span class="n">sc</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">hasVirus</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">sum</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="k">if</span><span class="o">(</span><span class="n">check</span><span class="o">(</span><span class="n">sum</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="n">i</span><span class="o">]))</span> <span class="o">{</span>
				<span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
			<span class="o">}</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">check</span><span class="o">(</span><span class="nc">Pair</span> <span class="n">base</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="kt">int</span> <span class="n">lower</span> <span class="o">=</span> <span class="n">lowerBound</span><span class="o">(</span><span class="n">sum</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">base</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>
			<span class="kt">int</span> <span class="n">upper</span> <span class="o">=</span> <span class="n">upperBound</span><span class="o">(</span><span class="n">sum</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">base</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>
			<span class="k">if</span><span class="o">(!</span><span class="n">hasSameCode</span><span class="o">(</span><span class="n">lower</span><span class="o">,</span> <span class="n">upper</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">base</span><span class="o">.</span><span class="na">idx</span><span class="o">))</span> <span class="o">{</span>
				<span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
			<span class="o">}</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
	<span class="o">}</span>
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">hasSameCode</span><span class="o">(</span><span class="kt">int</span> <span class="n">lower</span><span class="o">,</span> <span class="kt">int</span> <span class="n">upper</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="n">lower</span><span class="o">;</span> <span class="n">k</span><span class="o">&lt;</span><span class="n">upper</span><span class="o">;</span> <span class="n">k</span><span class="o">++)</span> <span class="o">{</span>
			<span class="k">if</span><span class="o">(</span><span class="n">isSameCode</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">j</span><span class="o">,</span> <span class="n">sum</span><span class="o">[</span><span class="n">j</span><span class="o">][</span><span class="n">k</span><span class="o">].</span><span class="na">idx</span><span class="o">))</span> <span class="o">{</span>
				<span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
			<span class="o">}</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isSameCode</span><span class="o">(</span><span class="kt">int</span> <span class="n">i1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i2</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j2</span><span class="o">)</span> <span class="o">{</span>
		<span class="kt">boolean</span> <span class="n">ret</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">K</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="k">if</span><span class="o">(</span><span class="n">programs</span><span class="o">[</span><span class="n">i1</span><span class="o">][</span><span class="n">j1</span><span class="o">+</span><span class="n">i</span><span class="o">]</span> <span class="o">!=</span> <span class="n">programs</span><span class="o">[</span><span class="n">i2</span><span class="o">][</span><span class="n">j2</span><span class="o">+</span><span class="n">i</span><span class="o">])</span> <span class="o">{</span>
				<span class="n">ret</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
				<span class="k">break</span><span class="o">;</span>
			<span class="o">}</span>
		<span class="o">}</span>
		<span class="k">if</span><span class="o">(</span><span class="n">ret</span><span class="o">)</span> <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
		
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">K</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="k">if</span><span class="o">(</span><span class="n">programs</span><span class="o">[</span><span class="n">i1</span><span class="o">][</span><span class="n">j1</span><span class="o">+</span><span class="n">i</span><span class="o">]</span> <span class="o">!=</span> <span class="n">programs</span><span class="o">[</span><span class="n">i2</span><span class="o">][</span><span class="n">j2</span> <span class="o">+</span> <span class="no">K</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">i</span><span class="o">])</span> <span class="o">{</span>
				<span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
			<span class="o">}</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
	<span class="o">}</span>
	
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">lowerBound</span><span class="o">(</span><span class="nc">Pair</span><span class="o">[]</span> <span class="n">prog</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">low</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">high</span> <span class="o">=</span> <span class="n">prog</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="n">low</span> <span class="o">+</span> <span class="o">(</span><span class="n">high</span> <span class="o">-</span> <span class="n">low</span><span class="o">)/</span><span class="mi">2</span><span class="o">;</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">target</span> <span class="o">&lt;=</span> <span class="n">prog</span><span class="o">[</span><span class="n">mid</span><span class="o">].</span><span class="na">val</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">high</span> <span class="o">=</span> <span class="n">mid</span><span class="o">;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="n">low</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">low</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">upperBound</span><span class="o">(</span><span class="nc">Pair</span><span class="o">[]</span> <span class="n">prog</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">low</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">high</span> <span class="o">=</span> <span class="n">prog</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="n">low</span> <span class="o">+</span> <span class="o">(</span><span class="n">high</span> <span class="o">-</span> <span class="n">low</span><span class="o">)/</span><span class="mi">2</span><span class="o">;</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">target</span> <span class="o">&gt;=</span> <span class="n">prog</span><span class="o">[</span><span class="n">mid</span><span class="o">].</span><span class="na">val</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">low</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="n">high</span> <span class="o">=</span> <span class="n">mid</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">low</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
:ET