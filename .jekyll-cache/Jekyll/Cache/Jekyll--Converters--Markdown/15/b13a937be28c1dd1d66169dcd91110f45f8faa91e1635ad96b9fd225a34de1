I"]<hr />
<h2 id="프로세스와-스레드">프로세스와 스레드</h2>
<p>프로세스는 실행중인 간단히 말하면 실행중인 프로그램을 의미한다. 그리고 프로세스는 실행될 때 운영체제로부터 시스템 자원을 할당받는다. 예를들어 크롬 브라우저는 하나의 프로그램이 될 것이다. 그리고 크롬 브라우저를 여러개 실행하면 이들은 모두 독립적인 프로세스가 된다. 프로세스는 각각 독립된 메모리 영역(Code, Data, Stack, Heap)을 할당 받는다.</p>

<p>스레드는 프로세스를 구성하는 작은 실행 단위다. 메신저 프로세스는 채팅, 파일전송 등 다양한 기능을 하고, 이 기능들은 개별 스레드에 의해 처리될 수 있다. 스레드는 프로세스 내에서 Stack을 따로 할당받고 Code, Data, Heap 영역은 공유한다.</p>

<hr />
<h2 id="자바-스레드-상태">자바 스레드 상태</h2>

<p><img src="./thread-state.png" title="Thread State" /></p>

<p>스레드 객체를 <strong>생성(NEW)</strong>하고 start() 메소드를 호출하면 스레드가 바로 실행되는 것이 아니라 <strong>실행</strong> <strong>대기 상태(RUNNABLE)</strong>에 놓이게 된다. 실행 대기 상태는 스레드를 실행할 준비가 되었지만 아직 스레드 스케줄러에 의해 스케줄링 되지 않아서 실행을 기다리고 있는 상태를 의미한다.</p>

<p>실행 대기 상태에 있는 스레드가 스케줄러에 의해 선택되면 스레드는 <strong>실행(RUNNING)</strong>상태가 된다. 실행된 스레드는 run() 메소드를 실행하는데 코드 블럭을 모두 실행하기 전에 스케줄러에 의해 다시 실행 대기 상태로 돌아갈 수 있다. run 메소드를 모두 실행하면 스레드는 <strong>종료 상태(TERMINATED)</strong>가 된다.</p>

<hr />
<h2 id="자바-스레드-상태-제어">자바 스레드 상태 제어</h2>
<p>실행중인 스레드의 상태를 변경하는 것을 스레드 상태 제어라고 한다. 멀티 스레드 프로그램은 정교한 스레드의 상태를 정교하게 제어해야한다. 만약 상태 제어가 잘못된다면 프로그램이 불안정해지거나 다운될 것이다.</p>

<p>스레드를 제대로 제어하기 위해서는 스레드의 상태 변화를 가져오는 메소드를 파악해야한다. 다음 그림은 스레드의 상태 변화를 가져오는 메소드를 보여준다.</p>

<p><img src="./thread-state-control.png" title="Thread State Control" /></p>

<p>위의 취소선을 가진 메소드는 스레드의 안정성을 해친다고 여겨져 <strong>Deprecated</strong>된 메소드다.</p>

<h3 id="sleep-method">sleep method</h3>
<p>실행 중인 스레드를 일정 시간동안 멈추게 하는 메소드다. sleep() 메소드를 호출한 스레드는 매개변수로 주어진 시간동안(밀리초) <strong>일시 정지 상태</strong>가 된다. 그리고 주어진 대기 시간이 지나면 해당 스레드는 다시 실행 대기 상태에 놓이고, 스케줄러에 의해 다시 실행된다.</p>

<h3 id="join-method">join method</h3>
<p>스레드는 서로 독립적으로 실행된다. 하지만 스레드는 코드, 데이터, 힙 영역을 공유하기 때문에 다른 스레드가 종료될 때까지 기다렸다가 실행해야 하는 경우도 있다. 예를들어 은행에서 출금을 할 경우 출금한 금액을 제외한후에 잔고를 보여줘야한다. 만약 출금한 금액을 제외하지 않고 잔고를 보여준다면 이는 명백히 문제다.</p>

<p>자바의 스레드는 이런 경우를 위해 join() 메소드를 제공한다. 예를들어 main thread에서 bankThread.join() 메소드를 호출할 경우 메인 스레드는 bank thread가 종료될 때까지 <strong>일시 정지 상태</strong>가 된다. 그리고 bank thread가 종료되면 main thread는 다시 실행 대기 상태에 놓이고, 스케줄러에 의해 다시 실행된다.</p>

<h3 id="yield-method">yield method</h3>
<p>yield() 메소드를 호출한 스레드는 <strong>실행 대기 상태</strong>가 된다. 그리고 우선순위가 동일하거나 더 높은 다른 스레드는 실행 기회를 갖게 된다. 즉, 실행 중에 다른 스레드에게 실행을 양보하고, 자신은 실행 대기 상태가 된다.</p>

<h3 id="wait-notify-notifyall-method">wait, notify, notifyAll method</h3>
<p>스레드가 자원에 락(lock)을 걸을 걸었는데, 특정 조건이 만족될 때 까지 기다려야하는 경우를 생각해보자. 만약 특정 조건이 만족되기까지 오랜 시간이 걸린다면 해당 자원은 조건이 만족되기 전까지 사용되지 못할 것이다. 그런데 다른 스레드에서 해당 자원을 필요로 한다면 이는 명백한 자원의 낭비가 될 것이다.</p>

<p>이런 비효율을 개선하기 위해 wait()와 notify()를 사용한다. 스레드가 락을 걸고 조건이 만족될 때 까지 무한정 기다리는 대신에, wait()를 호출하여 다른 스레드에게 제어권을 넘겨주는 것이다.</p>

<p>wait()를 호출한 객체는 waiting pool에서 대기하게 된다. 그리고 notify() 메소드가 호출되면 풀에서 대기하던 스레드 중 하나를 깨우고, notifyAll()은 풀에서 대기하는 모든 스레드를 깨운다.</p>

<p>notify()를 호출할 경우 어떤 객체가 깨어날 지 알 수 없기 때문에 notifyAll()로 모든 객체를 깨운 뒤 JVM의 스레드 스케줄러에 의해서 처리되는 것이 안전하다. 그리고 wait, notify, notifyAll 메소드는 모두 동기화 블록(synchronized) 내에서만 사용할 수 있다.</p>

<hr />
<h2 id="references">References</h2>
<p><a href="https://palpit.tistory.com/729">https://palpit.tistory.com/729</a></p>

<p><a href="https://gmlwjd9405.github.io/2018/09/14/process-vs-thread.html">https://gmlwjd9405.github.io/</a></p>

<p><a href="https://m.blog.naver.com/PostView.nhn?blogId=mals93&amp;logNo=220740747639&amp;proxyReferer=https%3A%2F%2Fwww.google.com%2F">https://m.blog.naver.com/</a></p>

<p><a href="http://happinessoncode.com/2017/10/05/java-object-wait-and-notify/">http://happinessoncode.com/</a></p>
:ET