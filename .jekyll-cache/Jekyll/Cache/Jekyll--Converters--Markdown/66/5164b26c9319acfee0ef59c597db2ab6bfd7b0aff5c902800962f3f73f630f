I"A1<h2 id="문제">문제</h2>
<p><a href="https://www.acmicpc.net/problem/9019">백준 - DSLR</a></p>

<hr />
<h2 id="설명">설명</h2>
<p>레지스터에 저장된 수 X를 주어진 네 가지 연산을 통해 Y로 바꾸는 문제다.</p>

<hr />
<h2 id="풀이">풀이</h2>
<p>최소 횟수로 X를 Y로 바꾸는 문제이기 때문에 BFS를 이용하여 문제를 풀이하였다. 문제를 일반적으로 풀이하는데는 크게 어려움이 없다. 하지만 다양한 최적화 요소를 통해 메모리와 시간을 줄이기 좋은 문제다.</p>

<p>큐를 배열로 만들어서 사용하였다. 큐에 들어갈 수 있는 값을 개수가 최대 10000개이기 때문에 배열을 이용하는 것이 더욱 빠르다. 또한 큐를 배열로 만들면 front, rear 변수만 초기화하면 큐를 그대로 이용할 수 있기 때문에, 큐를 Static 변수로 선언하여 재활용이 가능하다. 명령어를 저장하기 위한 inst배열과 visit 배열도 static 변수로 선언하여 메모리를 획기적으로 줄였다. 테스트 케이스 T의 개수가 매우 많은 것으로 보인다.</p>

<p>현재의 명령어 상태를 문자열이 아닌 long type을 이용해 저장하였다. 문자열은 값을 복사하려면 모든 문자를 순회하거나 ’+’ 연산자를 통해 새로운 문자열 객체를 반환해야한다. 따라서 실행속도와 메모리 이용 측면에서 많은 자원을 필요로한다. 하지만 long type을 이용해 명령어 상태를 저장하면 단순 곱셈 연산으로 이를 대체할 수 있다. 따라서 메모리와 실행속도를 획기적으로 개선할 수 있다.</p>

<p>long type을 이용한 아이디어는 운 좋게 찾아낼 수 있었다. 디버깅을 통해 다양한 테스트 케이스를 실행했는데, 명령어의 길이가 20자를 넘는 경우가 거의 없었다. 따라서 long을 사용하여 명령어 정보를 충분히 저장할 수 있다고 판단하였고, 이는 실제로 정상 작동하였다.</p>

<h2 id="코드">코드</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">q</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">10000</span><span class="o">];</span>
	<span class="kd">static</span> <span class="kt">long</span><span class="o">[]</span> <span class="n">inst</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">long</span><span class="o">[</span><span class="mi">10000</span><span class="o">];</span>
	<span class="kd">static</span> <span class="kt">boolean</span><span class="o">[]</span> <span class="n">visit</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="mi">10000</span><span class="o">];</span>
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		<span class="c1">// custom scanner using buffered reader and string tokenizer</span>
		<span class="c1">// MyScanner sc = new MyScanner(); </span>
		<span class="nc">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="nc">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
		<span class="kt">char</span><span class="o">[]</span> <span class="n">parser</span> <span class="o">=</span> <span class="o">{</span><span class="sc">'D'</span><span class="o">,</span> <span class="sc">'S'</span><span class="o">,</span> <span class="sc">'L'</span><span class="o">,</span> <span class="sc">'R'</span><span class="o">};</span>
		<span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="k">while</span><span class="o">(</span><span class="n">t</span><span class="o">--</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
			<span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="n">convert</span><span class="o">(</span><span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(),</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">());</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
				<span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">parser</span><span class="o">[</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)-</span><span class="sc">'1'</span><span class="o">]);</span>
			<span class="o">}</span>
			<span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="sc">'\n'</span><span class="o">);</span>
		<span class="o">}</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">sb</span><span class="o">);</span>
		<span class="n">sc</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
	<span class="o">}</span>
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">convert</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">Arrays</span><span class="o">.</span><span class="na">fill</span><span class="o">(</span><span class="n">visit</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
		<span class="kt">int</span> <span class="n">f</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="n">r</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
		<span class="n">q</span><span class="o">[++</span><span class="n">f</span><span class="o">]</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
		<span class="n">inst</span><span class="o">[</span><span class="n">x</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
		<span class="n">visit</span><span class="o">[</span><span class="n">x</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
		<span class="k">while</span><span class="o">(</span><span class="n">f</span> <span class="o">!=</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">x</span> <span class="o">=</span> <span class="n">q</span><span class="o">[++</span><span class="n">r</span><span class="o">];</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">4</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
				<span class="kt">int</span> <span class="n">next</span> <span class="o">=</span> <span class="n">getNext</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">i</span><span class="o">);</span>
				<span class="k">if</span><span class="o">(</span><span class="n">visit</span><span class="o">[</span><span class="n">next</span><span class="o">])</span> <span class="k">continue</span><span class="o">;</span>
				<span class="n">inst</span><span class="o">[</span><span class="n">next</span><span class="o">]</span> <span class="o">=</span> <span class="n">inst</span><span class="o">[</span><span class="n">x</span><span class="o">]</span> <span class="o">*</span> <span class="mi">10L</span> <span class="o">+</span> <span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
				<span class="k">if</span><span class="o">(</span><span class="n">next</span> <span class="o">==</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
					<span class="k">return</span> <span class="nc">Long</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">inst</span><span class="o">[</span><span class="n">next</span><span class="o">]);</span>
				<span class="o">}</span>
				<span class="n">q</span><span class="o">[++</span><span class="n">f</span><span class="o">]</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>
				<span class="n">visit</span><span class="o">[</span><span class="n">next</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
			<span class="o">}</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
	<span class="o">}</span>
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">getNext</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span> <span class="n">inst</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">switch</span><span class="o">(</span><span class="n">inst</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">case</span> <span class="mi">0</span><span class="o">:</span> <span class="k">return</span> <span class="o">(</span><span class="n">n</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">%</span> <span class="mi">10000</span><span class="o">;</span>
		<span class="k">case</span> <span class="mi">1</span><span class="o">:</span> <span class="k">return</span> <span class="o">(</span><span class="n">n</span> <span class="o">+</span> <span class="mi">9999</span><span class="o">)</span> <span class="o">%</span> <span class="mi">10000</span><span class="o">;</span>
		<span class="k">case</span> <span class="mi">2</span><span class="o">:</span> <span class="k">return</span> <span class="o">(</span><span class="n">n</span> <span class="o">%</span> <span class="mi">1000</span><span class="o">)</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">+</span> <span class="o">(</span><span class="n">n</span> <span class="o">/</span> <span class="mi">1000</span><span class="o">);</span>
		<span class="k">case</span> <span class="mi">3</span><span class="o">:</span> <span class="k">return</span> <span class="o">(</span><span class="n">n</span> <span class="o">/</span> <span class="mi">10</span><span class="o">)</span> <span class="o">+</span> <span class="o">(</span><span class="n">n</span> <span class="o">%</span> <span class="mi">10</span><span class="o">)</span> <span class="o">*</span> <span class="mi">1000</span><span class="o">;</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
:ET