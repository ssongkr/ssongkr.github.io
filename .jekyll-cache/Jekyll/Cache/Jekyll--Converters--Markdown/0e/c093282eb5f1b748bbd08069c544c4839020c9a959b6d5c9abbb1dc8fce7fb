I"<h2 id="어노테이션이란">어노테이션이란?</h2>
<hr />
<ul>
  <li>자바 1.5 버전부터 지원되는 기능으로 일종의 <code class="highlighter-rouge">메타데이터(metadata)</code>다.</li>
  <li>어노테이션의 사전적 의미는 주석이다. 주석처럼 코드에 사용할 수 있고, 컴파일 또는 런타임 시에 해석된다.</li>
</ul>

<p> </p>
<h2 id="스프링-어노테이션의-종류">스프링 어노테이션의 종류</h2>
<hr />

<h4 id="1-spring-bean">1. Spring @Bean</h4>
<ul>
  <li>@Bean 어노테이션은 메서드에 적용된다.</li>
  <li>스프링 컨텍스트(Spring context)에 의해 관리되는 <code class="highlighter-rouge">빈(Bean)</code>을 반환하는 메서드라는 것을 명시한다.</li>
  <li>일반적으로 Configuration 클래스의 메서드에 선언된다.</li>
</ul>

<h4 id="2-spring-service">2. Spring @Service</h4>
<ul>
  <li>@Service 어노테이션은 특별화 된 @Component 어노테이션이다.</li>
  <li>오직 클래스에만 적용될 수 있다.</li>
  <li>클래스가 서비스를 제공한다는 것을 명시한다.</li>
</ul>

<h4 id="3-spring-component">3. Spring @Component</h4>
<ul>
  <li>@
Spring Component annotation is used to denote a class as Component. It means that the Spring framework will autodetect these classes for dependency injection when annotation-based configuration and classpath scanning is used.</li>
</ul>

<h4 id="4-spring-restcontroller">4. Spring @RestController</h4>
<p>Spring RestController annotation is a convenience annotation that is itself annotated with @Controller and @ResponseBody. This annotation is applied to a class to mark it as a request handler.</p>

<h4 id="5-spring-controller">5. Spring @Controller</h4>
<p>Spring Controller annotation is a specialization of @Component annotation. Spring Controller annotation is typically used in combination with annotated handler methods based on the RequestMapping annotation.</p>

<h4 id="6-spring-repository">6. Spring @Repository</h4>
<p>Spring @Repository annotation is used to indicate that the class provides the mechanism for storage, retrieval, search, update and delete operation on objects.</p>

<h4 id="7-spring-configuration">7. Spring @Configuration</h4>
<p>Spring @Configuration annotation is part of the spring core framework. Spring Configuration annotation indicates that the class has @Bean definition methods. So Spring container can process the class and generate Spring Beans to be used in the application.</p>

<h3 id="8-spring-spring-value">8. Spring Spring @Value</h3>
<p>Spring @Value annotation is used to assign default values to variables and method arguments. We can read spring environment variables as well as system variables using @Value annotation.</p>

<h3 id="9-spring-spring-propertysource">9. Spring Spring @PropertySource</h3>
<p>Spring @PropertySource annotation is used to provide properties file to Spring Environment. This annotation is used with @Configuration classes.</p>

<h3 id="10-spring-spring-postconstruct-and-predestroy">10. Spring Spring @PostConstruct and @PreDestroy</h3>
<p>When we annotate a method in Spring Bean with @PostConstruct annotation, it gets executed after the spring bean is initialized.</p>

<p>When we annotate a Spring Bean method with PreDestroy annotation, it gets called when bean instance is getting removed from the context.</p>

<h3 id="11-spring-async">11. Spring @Async</h3>
<p>Spring @Async annotation allows us to create asynchronous methods in spring. Let’s explore @Async in this tutorial on spring framework.</p>

:ET