I"0<h2 id="문제">문제</h2>
<p><a href="https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AWvQZmdKUoEDFASy&amp;categoryId=AWvQZmdKUoEDFASy&amp;categoryType=CODE">SWEA - 내전경기</a></p>

<h2 id="풀이">풀이</h2>
<p>아이디어가 중요한 문제다. 이분 그래프인지 여부를 통해 문제를 쉽게 해결할 수 있다. 이분 그래프가 무엇인지에 대해서는 추후에 포스팅하겠다.</p>

<h2 id="코드">코드</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
 
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">static</span> <span class="kt">int</span> <span class="no">N</span><span class="o">;</span>
    <span class="kd">static</span> <span class="kt">int</span> <span class="n">idx</span><span class="o">;</span>
    <span class="kd">static</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">graph</span><span class="o">;</span>
    <span class="kd">static</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">hash</span><span class="o">;</span>
    <span class="kd">static</span> <span class="nc">String</span><span class="o">[]</span> <span class="n">printer</span> <span class="o">=</span> <span class="o">{</span><span class="s">"No\n"</span><span class="o">,</span> <span class="s">"Yes\n"</span><span class="o">};</span>
     
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="kt">int</span> <span class="no">T</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="nc">StringBuilder</span> <span class="n">ans</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">(</span><span class="mi">1024</span><span class="o">);</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">tc</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span> <span class="n">tc</span><span class="o">&lt;=</span><span class="no">T</span><span class="o">;</span> <span class="n">tc</span><span class="o">++)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
            <span class="n">graph</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">*</span><span class="mi">2</span><span class="o">][</span><span class="no">N</span><span class="o">*</span><span class="mi">2</span><span class="o">];</span>
            <span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
            <span class="n">hash</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
                <span class="nc">String</span> <span class="n">s1</span> <span class="o">=</span> <span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">();</span>
                <span class="nc">String</span> <span class="n">s2</span> <span class="o">=</span> <span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">();</span>
                <span class="k">if</span><span class="o">(!</span><span class="n">hash</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">s1</span><span class="o">))</span> <span class="n">hash</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">s1</span><span class="o">,</span> <span class="n">idx</span><span class="o">++);</span>
                <span class="k">if</span><span class="o">(!</span><span class="n">hash</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">s2</span><span class="o">))</span> <span class="n">hash</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">s2</span><span class="o">,</span> <span class="n">idx</span><span class="o">++);</span>
                <span class="kt">int</span> <span class="n">u</span> <span class="o">=</span> <span class="n">hash</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">s1</span><span class="o">);</span>
                <span class="kt">int</span> <span class="n">v</span> <span class="o">=</span> <span class="n">hash</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">s2</span><span class="o">);</span>
                <span class="n">graph</span><span class="o">[</span><span class="n">u</span><span class="o">][</span><span class="n">v</span><span class="o">]</span> <span class="o">=</span> <span class="n">graph</span><span class="o">[</span><span class="n">v</span><span class="o">][</span><span class="n">u</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="n">ans</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"#"</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="n">tc</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">" "</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="n">printer</span><span class="o">[</span><span class="n">check</span><span class="o">()]);</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">ans</span><span class="o">);</span>
    <span class="o">}</span>
     
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">check</span><span class="o">()</span> <span class="o">{</span>
    	<span class="kt">int</span><span class="o">[]</span> <span class="n">visit</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">idx</span><span class="o">];</span>
    	<span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">q</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
    	<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">idx</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    		<span class="k">if</span><span class="o">(</span><span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="k">continue</span><span class="o">;</span>
    		<span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
    		<span class="n">visit</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
    		<span class="k">while</span><span class="o">(!</span><span class="n">q</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
    			<span class="kt">int</span> <span class="n">u</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
    			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">v</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">v</span><span class="o">&lt;</span><span class="n">idx</span><span class="o">;</span> <span class="n">v</span><span class="o">++)</span> <span class="o">{</span>
    				<span class="k">if</span><span class="o">(</span><span class="n">graph</span><span class="o">[</span><span class="n">u</span><span class="o">][</span><span class="n">v</span><span class="o">]</span> <span class="o">!=</span> <span class="mi">1</span><span class="o">)</span> <span class="k">continue</span><span class="o">;</span>
					<span class="k">if</span><span class="o">(</span><span class="n">visit</span><span class="o">[</span><span class="n">v</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
						<span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">v</span><span class="o">);</span>
						<span class="n">visit</span><span class="o">[</span><span class="n">v</span><span class="o">]</span> <span class="o">=</span> <span class="o">(-</span><span class="mi">1</span><span class="o">)</span> <span class="o">*</span> <span class="n">visit</span><span class="o">[</span><span class="n">u</span><span class="o">];</span>
					<span class="o">}</span> <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">visit</span><span class="o">[</span><span class="n">v</span><span class="o">]</span> <span class="o">==</span> <span class="n">visit</span><span class="o">[</span><span class="n">u</span><span class="o">])</span> <span class="o">{</span>
						<span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
					<span class="o">}</span>
    			<span class="o">}</span>
    		<span class="o">}</span>
    	<span class="o">}</span>
    	<span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
:ET